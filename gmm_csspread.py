# -*- encoding:utf-8 -*-
#  Date:20181003
#  Author:Botao Fan

import pandas as pd
import numpy as np
from statsmodels.sandbox.regression.gmm import GMM
import statsmodels.api as sm
import os
from scipy.stats import chi2
from scipy import stats

pd.set_option('display.width',1000)
pd.set_option('display.max_columns',1000)

#Tool functions
def load_csv(path):
    raw_data={}
    files_list=[]
    for root,dirs,files in os.walk(path):
        files_list=files
    for file in files_list:
        file_name=file.replace('.csv','')
        try:
            raw_data[file_name]=pd.read_csv(path+file_name+'.csv',index_col=0)
        except:
            pass
    return raw_data

def save_dict_as_csv(dict,path=''):
    for key in dict:
        dict[key].to_csv(path+key+'.csv')

def translate_commen_factor(factors_data,factors_name):
    factor=factors_data[factors_name].copy()
    factor.columns=['old']
    date_temp=factor.copy()
    del factor['old']
    for i in range(101):
        factor[str(i)]=date_temp

    factor_df=pd.DataFrame(factor.stack())
    factor_df.columns=[factors_name]
    factor_df[factor_df == float('inf')] = np.nan
    factor_df.index.names=[None,None]
    return factor_df

#Set data which more than mean+alpha*std or less than mean-alpha*std np.nan and return the new regression_df
def drop_extreme(regression_df,alpha=3):
    mean=regression_df.mean()
    std=regression_df.std()
    regression_df_without_extreme=regression_df.copy()
    regression_df_columns_list=regression_df.columns
    for key in regression_df_columns_list:
        regression_df_without_extreme.loc[(regression_df_without_extreme[key]>(mean[key]+alpha*std[key]))
                                      | (regression_df_without_extreme[key]<(mean[key]-alpha*std[key])),key]=np.nan
    regression_df_without_extreme.dropna(inplace=True)
    return regression_df_without_extreme



class AHGMM():
    def __init__(self,endog,exog,instruments,exog_names):
        '''
        :param endog: array[][] endog variables
        :param exog: array[][] exog variables
        :param instruments: array[][] instrumental variables
        :param exog_names: list[] names of exog variables
        '''
        if len(endog.shape)==1:
            endog=endog.reshape(len(endog),1)
        if endog.shape[0]!=exog.shape[0]:
            raise ValuError('endog is not the same length as exog')
        if exog.shape[0]!=instruments.shape[0]:
            raise ValuError('exog is not the same length as instruments')
        self.endog=endog
        self.exog=exog
        self.instruments=instruments
        self.exog_names=exog_names
        #Generated by input variables
        self.nobs=instruments.shape[0]
        self.nmoms=instruments.shape[1]
        self.paras_num=exog.shape[1]
        self.df=self.nobs-self.nmoms
        #Result to be generated
        self.paras=None
        self.weight=None
        self.var_matrix=None
        self.stdvar=None
        self.paras_ttest_pvalue=None
        self.j=None
        self.j_pvalue=None

    def fitgmm(self):
        weight=self.get_init_weight()
        paras=self.get_paras_fomula(weight)
        weight=self.get_weight(paras)
        paras=self.get_paras_fomula(weight)
        self.paras=paras
        self.weight=weight
        return paras,weight

    def get_init_weight(self):
        z=self.instruments
        return np.linalg.pinv(np.dot(z.T,z)/self.nobs)

    def get_paras_fomula(self,weight):
        x,y,z,w=self.exog,self.endog,self.instruments,weight
        part1=np.dot(np.dot(np.dot(np.dot(x.T,z),w),z.T),x)
        part2=np.dot(np.dot(np.dot(np.dot(x.T,z),w),z.T),y)
        paras=np.dot(np.linalg.pinv(part1),part2)
        return paras

    def get_weight(self,paras):
        mom=self.get_mom(paras)
        omiga=np.dot(mom.T,mom)
        weight=np.linalg.pinv(omiga/self.nobs)
        return weight

    def get_mom(self,paras):
        if len(paras.shape)==1:
            paras.reshape(len(paras),1)
        delta=self.get_err(paras)
        mom=self.instruments*delta
        return mom

    def get_err(self,paras):
        return np.dot(self.exog,paras)-self.endog

    def get_J(self):
        if self.paras is None or self.weight is None:
            raise ValuError('Please implement gmm_fit')
        delta=self.get_mom(self.paras)
        delta_mean=delta.mean(axis=0)
        delta_mean=delta_mean.reshape(len(delta_mean),1)
        self.j=self.nobs*np.dot(np.dot(delta_mean.T,self.weight),delta_mean)
        self.j_pvalue=1-(chi2.cdf(self.j,df=self.df))
        return self.j,self.j_pvalue

    def get_stdvar(self):
        if self.paras is None or self.weight is None:
            raise ValuError('Please implement gmm_fit')
        x,z,w=self.exog,self.instruments,(self.weight/self.nobs)
        var_part1=np.dot(np.dot(x.T,z),w)
        var_part2=np.dot(z.T,x)
        self.var_matrix=np.linalg.pinv(np.dot(var_part1,var_part2))
        self.stdvar=np.sqrt([self.var_matrix[i,i] for i in range(self.paras_num)])
        return self.stdvar

    def get_paras_ttest_pvalue(self):
        if self.paras is None or self.weight is None:
            raise ValuError('Please implement gmm_fit')
        if self.stdvar is None:
            stdvar=self.get_stdvar()
        else:
            stdvar=self.stdvar
        paras=self.paras
        paras_ttest_pvalue=[]

        for i in range(self.paras_num):
            if paras[i]>0:
                p_value=2*(1-stats.t.cdf(paras[i]/stdvar[i],df=self.df))
            else:
                p_value=2*stats.t.cdf(paras[i]/stdvar[i],df=self.df)
            paras_ttest_pvalue.append(p_value)
        self.paras_ttest_pvalue=paras_ttest_pvalue
        return self.paras_ttest_pvalue

    def summary(self):
        #gmm_result=pd.DataFrame([],index=index_name,columns=columns_name)
        if self.paras is None or self.weight is None:
            raise ValuError('Please implement gmm_fit before get J')

        self.get_J()
        self.get_stdvar()
        self.get_paras_ttest_pvalue()

        para_names=self.exog_names
        paras=self.paras
        stdvar=self.stdvar
        pvalue=self.paras_ttest_pvalue
        j=self.j
        j_pvalue=self.j_pvalue

        if j_pvalue < 0.01:
            star_j = '***'
        elif j_pvalue < 0.05:
            star_j = '**'
        elif j_pvalue < 0.1:
            star_j = '*'
        else:
            star_j = ''

        for i in range(self.paras_num):
            if pvalue[i]<0.01:
                star_para='***'
            elif pvalue[i]<0.05:
                star_para='**'
            elif pvalue[i]<0.1:
                star_para='*'
            else:
                star_para=''
            print "%s : %.6f ( %.6f)%s pvalue=%.6f "%(para_names[i],paras[i],stdvar[i],star_para,pvalue[i])

        print 'Sarganâ€“Hansen J-test(H0: Sum of moments is zero):'
        print 'J is %.8f %s' %(j,star_j)
        print 'Pvalue of J is %0.6f' %j_pvalue

if __name__=='__main__':
    #Load raw data and generate regression format dataframe
    #regression_df contains dataframe which will be used in regression.
    root_path=os.getcwd()
    factors_data_monthly_path=root_path+'/../factors_data_monthly/'
    factors_data=load_csv(factors_data_monthly_path)
    #get discount_y
    regression_df=pd.DataFrame(factors_data['discount_y'].stack())
    regression_df.columns=['discount_y']
    #get stack dataframe for exogenous variables
    x_list= ['csspread_A','csspread_H','AH_share_size','supply','vol']
    for key in x_list:
        factor_df=pd.DataFrame(factors_data[key].copy().stack())
        factor_df.columns=[key]
        factor_df[factor_df==float('inf')]=np.nan
        regression_df = regression_df.merge(factor_df, left_index=True, right_index=True, how='left')
    regression_df['csspread_AH']=regression_df['csspread_A']/regression_df['csspread_H']
    del regression_df['csspread_A'],regression_df['csspread_H']

    factor_df = translate_commen_factor(factors_data, 'csi_hsc')
    regression_df = regression_df.merge(factor_df, left_index=True, right_index=True, how='left')

    #Drop the raw contains extreme values which means values larger than mean+3*std or smaller than mean-3*std
    regression_df_without_extreme=drop_extreme(regression_df,alpha=3)
    regression_df_without_extreme.reset_index(inplace=True)
    regression_df_without_extreme.rename(columns={'level_0':'date','level_1':'company'},inplace=True)
    regression_df_without_extreme.set_index(['company','date'],inplace=True)
    regression_df_without_extreme_lag1=regression_df_without_extreme.groupby('company').apply(lambda x: x.shift(1))
    regression_df_without_extreme_lag2=regression_df_without_extreme.groupby('company').apply(lambda x: x.shift(2))
    regression_df_lag=pd.merge(left=regression_df_without_extreme,right=regression_df_without_extreme_lag1,
                                           left_index=True,right_index=True,how='left',suffixes=('','_lag1'))
    regression_df_lag=pd.merge(left=regression_df_lag,right=regression_df_without_extreme_lag2,
                                           left_index=True,right_index=True,how='left',suffixes=('','_lag2'))
    regression_df_lag[regression_df_lag == float('inf')] = np.nan
    regression_df_lag.dropna(inplace=True)
    regression_df_lag['constant']=1


    #===============model csspread===================
    #Get instrumental variables
    instruments_df=regression_df_lag.copy()
    generate_instruments_list=[
        'discount_y','csspread_AH','AH_share_size', 'supply', 'vol','csi_hsc',
        ]
    for i in generate_instruments_list:
        instruments_df[i+'_diff']=instruments_df[i+'_lag1']-instruments_df[i+'_lag2']

    #Generate gmm data
    x_regression_list = ['constant',
                         'csspread_AH',
                         'AH_share_size', 'supply', 'vol','csi_hsc'
                         ]
    y_regression_list=['discount_y']
    instruments_list=['csspread_AH','csspread_AH_diff',
                      'AH_share_size', 'supply', 'vol','csi_hsc',
                      'AH_share_size_diff', 'supply_diff', 'vol_diff','csi_hsc_diff',
                      'discount_y_diff'
                      ]
    #get exdog and enog variables
    endog=regression_df_lag[y_regression_list].values
    exog=regression_df_lag[x_regression_list].values
    instruments=instruments_df[instruments_list].values
    ah_gmm=AHGMM(endog,exog,instruments,x_regression_list)
    paras,weight=ah_gmm.fitgmm()
    print '==================model csspread======================='
    ah_gmm.summary()
    print ah_gmm.nobs

